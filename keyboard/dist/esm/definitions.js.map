{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC;AAE5B;IAAE,oBAAoB,CAAA;CAAE;AAAC,IAAI,CAAA;AAAC,iBAAiB,CAAC;AAgE5D,MAAM,CAAN,IAAY,aAwBX;AAxBD,WAAY,aAAa;IACvB;;;;OAIG;IACH,8BAAa,CAAA;IAEb;;;;OAIG;IACH,gCAAe,CAAA;IAEf;;;;;;;OAOG;IACH,oCAAmB,CAAA;AACrB,CAAC,EAxBW,aAAa,KAAb,aAAa,QAwBxB;AAWD,MAAM,CAAN,IAAY,cA+BX;AA/BD,WAAY,cAAc;IACxB;;;;;OAKG;IACH,+BAAa,CAAA;IAEb;;;;;OAKG;IACH,iCAAe,CAAA;IAEf;;;;;OAKG;IACH,mCAAiB,CAAA;IAEjB;;;;OAIG;IACH,+BAAa,CAAA;AACf,CAAC,EA/BW,cAAc,KAAd,cAAc,QA+BzB","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\r\n\r\nimport type { PluginListenerHandle } from '@capacitor/core';\r\n\r\ndeclare module '@capacitor/cli' {\r\n  export interface PluginsConfig {\r\n    /**\r\n     * On iOS, the keyboard can be configured with the following options:\r\n     */\r\n    Keyboard?: {\r\n      /**\r\n       * Configure the way the app is resized when the Keyboard appears.\r\n       *\r\n       * Only available on iOS.\r\n       *\r\n       * @since 1.0.0\r\n       * @default native\r\n       * @example \"body\"\r\n       */\r\n      resize?: KeyboardResize;\r\n\r\n      /**\r\n       * Override the keyboard style if your app doesn't support dark/light theme changes.\r\n       * If not set, the keyboard style will depend on the device appearance.\r\n       *\r\n       * Only available on iOS.\r\n       *\r\n       * @since 1.0.0\r\n       * @example \"DARK\"\r\n       */\r\n      style?: KeyboardStyle;\r\n\r\n      /**\r\n       * There is an Android bug that prevents the keyboard from resizing the WebView\r\n       * when the app is in full screen (i.e. if StatusBar plugin is used to overlay the status bar).\r\n       * This setting, if set to true, add a workaround that resizes the WebView even when the app is in full screen.\r\n       *\r\n       * Only available for Android\r\n       *\r\n       * @since 1.1.0\r\n       * @example true\r\n       */\r\n      resizeOnFullScreen?: boolean;\r\n    };\r\n  }\r\n}\r\n\r\nexport interface KeyboardInfo {\r\n  /**\r\n   * Height of the heyboard.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  keyboardHeight: number;\r\n}\r\n\r\nexport interface KeyboardStyleOptions {\r\n  /**\r\n   * Style of the keyboard.\r\n   *\r\n   * @since 1.0.0\r\n   * @default KeyboardStyle.Default\r\n   */\r\n  style: KeyboardStyle;\r\n}\r\n\r\nexport enum KeyboardStyle {\r\n  /**\r\n   * Dark keyboard.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  Dark = 'DARK',\r\n\r\n  /**\r\n   * Light keyboard.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  Light = 'LIGHT',\r\n\r\n  /**\r\n   * On iOS 13 and newer the keyboard style is based on the device appearance.\r\n   * If the device is using Dark mode, the keyboard will be dark.\r\n   * If the device is using Light mode, the keyboard will be light.\r\n   * On iOS 12 the keyboard will be light.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  Default = 'DEFAULT',\r\n}\r\n\r\nexport interface KeyboardResizeOptions {\r\n  /**\r\n   * Mode used to resize elements when the keyboard appears.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  mode: KeyboardResize;\r\n}\r\n\r\nexport enum KeyboardResize {\r\n  /**\r\n   * Only the `body` HTML element will be resized.\r\n   * Relative units are not affected, because the viewport does not change.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  Body = 'body',\r\n\r\n  /**\r\n   * Only the `ion-app` HTML element will be resized.\r\n   * Use it only for Ionic Framework apps.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  Ionic = 'ionic',\r\n\r\n  /**\r\n   * The whole native Web View will be resized when the keyboard shows/hides.\r\n   * This affects the `vh` relative unit.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  Native = 'native',\r\n\r\n  /**\r\n   * Neither the app nor the Web View are resized.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  None = 'none',\r\n}\r\n\r\nexport interface KeyboardPlugin {\r\n  /**\r\n   * Show the keyboard. This method is alpha and may have issues.\r\n   *\r\n   * This method is only supported on Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  show(): Promise<void>;\r\n\r\n  /**\r\n   * Hide the keyboard.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  hide(): Promise<void>;\r\n\r\n  /**\r\n   * Set whether the accessory bar should be visible on the keyboard. We recommend disabling\r\n   * the accessory bar for short forms (login, signup, etc.) to provide a cleaner UI.\r\n   *\r\n   * This method is only supported on iPhone devices.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  setAccessoryBarVisible(options: { isVisible: boolean }): Promise<void>;\r\n\r\n  /**\r\n   * Programmatically enable or disable the WebView scroll.\r\n   *\r\n   * This method is only supported on iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  setScroll(options: { isDisabled: boolean }): Promise<void>;\r\n\r\n  /**\r\n   * Programmatically set the keyboard style.\r\n   *\r\n   * This method is only supported on iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  setStyle(options: KeyboardStyleOptions): Promise<void>;\r\n\r\n  /**\r\n   * Programmatically set the resize mode.\r\n   *\r\n   * This method is only supported on iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  setResizeMode(options: KeyboardResizeOptions): Promise<void>;\r\n\r\n  /**\r\n   * Get the currently set resize mode.\r\n   *\r\n   * This method is only supported on iOS.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  getResizeMode(): Promise<KeyboardResizeOptions>;\r\n\r\n  /**\r\n   * Listen for when the keyboard is about to be shown.\r\n   *\r\n   * On Android keyboardWillShow and keyboardDidShow fire almost at the same time.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'keyboardWillShow',\r\n    listenerFunc: (info: KeyboardInfo) => void,\r\n  ): Promise<PluginListenerHandle>;\r\n\r\n  /**\r\n   * Listen for when the keyboard is shown.\r\n   *\r\n   * On Android keyboardWillShow and keyboardDidShow fire almost at the same time.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'keyboardDidShow',\r\n    listenerFunc: (info: KeyboardInfo) => void,\r\n  ): Promise<PluginListenerHandle>;\r\n\r\n  /**\r\n   * Listen for when the keyboard is about to be hidden.\r\n   *\r\n   * On Android keyboardWillHide and keyboardDidHide fire almost at the same time.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'keyboardWillHide',\r\n    listenerFunc: () => void,\r\n  ): Promise<PluginListenerHandle>;\r\n\r\n  /**\r\n   * Listen for when the keyboard is hidden.\r\n   *\r\n   * On Android keyboardWillHide and keyboardDidHide fire almost at the same time.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'keyboardDidHide',\r\n    listenerFunc: () => void,\r\n  ): Promise<PluginListenerHandle>;\r\n\r\n  /**\r\n   * Remove all native listeners for this plugin.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  removeAllListeners(): Promise<void>;\r\n}\r\n"]}